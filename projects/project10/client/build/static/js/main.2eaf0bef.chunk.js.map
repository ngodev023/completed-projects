{"version":3,"sources":["Data.js","Context.js","PrivateRoute.js","components/Header.js","components/Form.js","components/UserSignUp.js","components/UserSignIn.js","components/UserSignOut.js","components/Courses.js","components/CourseDetail.js","components/CreateCourse.js","components/UpdateCourse.js","components/NotFound.js","components/Forbidden.js","components/UnhandledError.js","App.js","index.js"],"names":["Data","path","method","body","requiresAuth","credentials","url","options","headers","JSON","stringify","encodedCredentials","btoa","emailAddress","password","fetch","a","this","api","response","user","props","results","status","history","push","json","courseId","result","reqBody","post","Context","React","createContext","Provider","state","authenticatedUser","Cookies","getJSON","authenticatedPassword","signIn","data","getUser","setState","set","expires","signOut","remove","value","actions","children","Component","Consumer","withContext","context","PrivateRoute","component","rest","Route","render","Redirect","to","pathname","from","location","Header","authUser","className","Link","firstName","lastName","ErrorsDisplay","errors","errorsDisplay","length","map","error","i","Form","cancel","submit","submitButtonText","elements","onSubmit","event","preventDefault","type","onClick","UserSignUp","confirmedPassword","change","name","target","createUser","Fragment","id","onChange","placeholder","UserSignIn","message","UserSignOut","useEffect","Courses","courses","getCourses","then","gottenCourses","course","title","version","xmlns","x","y","viewBox","points","CourseDetail","courseTitle","courseDesc","courseTime","courseMaterials","ownerFN","ownerLN","ownerEmail","ownerId","ownerPresent","userAuth","match","params","getOneCourse","gottenCourse","description","estimatedTime","materialsNeeded","window","confirm","deleteCourse","updateGate","destroy","bind","CreateCourse","createCourse","get","htmlFor","UpdateCourse","updateCourse","userId","NotFound","Forbidden","UnhandledError","HeaderWithContext","UserSignUpWithContext","UserSignInWithContext","UserSignOutWithContext","CoursesWithContext","CourseDetailWithContext","CreateCourseWithContext","UpdateCourseWithContext","App","Switch","exact","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2eaf0bef.chunk.js","sourcesContent":["// This class can be used to create an instance housing various methods of calling fetch to localhost:5000/api, where a restful api should be running to serve data\n\nexport default class Data {\n  // method for sending requests to REST api\n  api(path, method = 'GET', body = null, requiresAuth = false, credentials = null) {\n    \n    const url = 'https://test-app023.herokuapp.com/api' + path;\n  \n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n    };\n\n    if (body !== null) {\n      options.body = JSON.stringify(body);\n    }\n\n    if(requiresAuth) {\n      const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`);\n      options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n    }\n\n    return fetch(url, options);\n  }\n\n  // method for getting user info from REST api... primarily used to authenticate user.\n  async getUser(emailAddress, password) {\n    const response = await this.api(`/users`, 'GET', null, true, {emailAddress, password});\n    return response;\n  }\n  \n  // method that assists the sign up page by logging data into REST api's database.\n  async createUser(user) {\n    const response = await this.api('/users', 'POST', user);\n    return response;\n  }\n\n  // Method gets courses from db, doesn't require auth, but will redirect to error page if it doesn't get a 200 status code in response\n  // props argument allows for redirecting.\n  async getCourses(props) {\n    const results = await this.api('/courses');\n    if( results.status !== 200) {\n      props.history.push('/error');\n    } else {\n      return results.json();\n    }\n  }\n\n  // gets one course from db based on argument, the course's id\n  // will only respond with course or null; component will handle from there...\n  async getOneCourse (courseId, history) {\n    const result = await this.api('/courses/'+courseId);\n    if(result.status === 200) {\n      return result.json();\n    } else if (result.status === 500) {\n      // if api isn't working propertly, redirect user to error page\n      history.push('/error')\n    }\n  }\n\n  // Creates a new course; will return a status code and the location uri, which can be used to redirect user to the newly created course.\n  async createCourse (reqBody, emailAddress, password) {\n    const post = await this.api('/courses/', 'POST', reqBody, true, {emailAddress, password});\n    return post;\n  }\n\n  // updates a course via PUT route on api side\n  async updateCourse (courseId, reqBody, emailAddress, password){\n    const response = await this.api('/courses/'+courseId, 'PUT', reqBody, true, {emailAddress, password});\n    return response;\n  }\n\n  // deletes course; requires auth; will prompt user to confirm choice before carrying out destroy method.\n  async deleteCourse (courseId, emailAddress, password) {\n    const response = await this.api('/courses/'+courseId, 'DELETE', null, true, {emailAddress, password});\n    if (response.status === 204) {\n      return \"Course Deleted\"\n    } else if (response.status === 500) {\n      return \"ERROR\"\n    } else {\n      return \"ERROR\"\n    }\n  }\n}\n  \n  ","import React, { Component } from 'react';\nimport Data from './Data';\nimport Cookies from 'js-cookie';\n\nconst Context = React.createContext(); \n\n// This class will mainly serve as a higher order component, wrapping around all other components to provide data such as:\n// * the signIn method\n// * the signOut method\n// * the authenticated user info: email Address and password--to prevent having to repeatedly sign in\n// its primary export is withContext, which can be used in App.js to wrap all the other components inside Provider context as an argument\nexport class Provider extends Component {\n\n  // initiate the provider class with a space for cookies password and email address; initially set to null as there is no logged in user\n  state = {\n    authenticatedUser: Cookies.getJSON('authenticatedUser') || null,\n    authenticatedPassword: Cookies.getJSON('authenticatedPassword') || null\n  }\n  constructor() {\n    // the kernel of the Provider component; initiate a Data instance so that Consumers can access things like fetch requests for creating, updating, courses/users\n    super();\n    this.data = new Data();\n  }\n\n  render() {\n    const {authenticatedUser, authenticatedPassword} = this.state;\n\n    // The ability to sign in and out will be passed down to all children of Provider (subscribed ones) will be stored in the value object\n    const value ={\n      authenticatedUser,\n      authenticatedPassword,\n      data: this.data,\n      actions: {\n        signIn: this.signIn,\n        signOut: this.signOut\n      }\n    }\n    // render all compoents subscribed with access to value prop.\n    // any component passed to withContext in App.js will have access to this class's value object via this.props.context--> value = props.context\n    return (\n      <Context.Provider value={value}>\n        {this.props.children}\n      </Context.Provider>  \n    );\n  }\n\n  // handles signing in\n  signIn = async (emailAddress, password) => {\n    // make a request to the db using provided signin info\n    const response = await this.data.getUser(emailAddress, password); \n    // returns {firstName, lastName, emailAddress} or null if user isn't found\n\n    \n    let user;\n    if(response.status === 200){\n      // if there was successful login (200 status code) go about setting the authenticatedUser pw and email in state\n       user = await response.json(); \n      this.setState(() => {\n        return {\n          authenticatedUser: user,\n          authenticatedPassword: password\n        }\n      });\n      // Set cookie for user and password\n      Cookies.set('authenticatedUser', JSON.stringify(user), {expires: 1});\n      Cookies.set('authenticatedPassword', JSON.stringify(password), {expires: 1});\n    } \n    return response;\n  }\n\n  // simply set state's user and password back to null, and remove cookies\n  signOut = () => {\n    this.setState(() => {\n      return {\n        authenticatedUser: null,\n        authenticatedPassword: null,\n      };\n    });\n    Cookies.remove('authenticatedUser');\n    Cookies.remove('authenticatedPassword');\n  }\n}\n\n// for protecting private routes that need authentication to access. Visit PrivateRoute.js for more info\nexport const Consumer = Context.Consumer;\n\n/**\n * A higher-order component that wraps the provided component in a Context Consumer component.\n * @param {class} Component - A React component.\n * @returns {function} A higher-order component.\n */\n\nexport default function withContext(Component) {\n  return function ContextComponent(props) {\n    return (\n      <Context.Consumer>\n        {context => <Component {...props} context={context} />}\n      </Context.Consumer>\n    );\n  }\n}\n\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Consumer } from './Context';\n\n// This component generates a route component, with will only allow access if context. authenticatedUser has a value: line 12\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Consumer>\n      { context => (\n        <Route\n          {...rest}\n          render={ props => context.authenticatedUser ? (\n              <Component {...props} />\n            ) : (\n              <Redirect to={{\n                pathname: '/signin',\n                state: {from: props.location}\n              }} />\n            )\n          \n          }\n        />\n      )}\n    </Consumer>\n  );\n};\n\nexport default PrivateRoute;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// This header component will linger above each route in the program, and will display user or lackthereof based on inform it extracts from Context.js\n// Header is a stateless component, so access of props is simply props, not this.props\n// Header will display signup and signin if user is not signed in; and signout if user is already signed in\nconst Header = (props) => {\n  \n    // getting the authentication status from Provider component\n    const {context} = props;\n    const authUser = context.authenticatedUser;\n    return (\n      <header>\n        <div className=\"wrap header--flex\">\n          <h1 className=\"header--logo\"><Link to=\"/\">Courses</Link></h1>\n          <nav>\n            {authUser ?\n              (\n                <ul className=\"header--signedin\">\n                  <li><span>Welcome, {authUser.firstName} {authUser.lastName}!</span></li>\n                  <li><Link to=\"/signout\">Sign Out</Link></li>\n                </ul>\n              )\n              :\n              (\n                <ul className=\"header--signedout\">\n                  <li><Link to=\"/signup\">Sign Up</Link></li>\n                  <li><Link to=\"/signin\">Sign In</Link></li>\n                </ul>\n              )\n              }\n            </nav>\n        </div>\n      </header>\n      \n    );\n  };\n\n  export default Header;","import React from 'react';\n\n// this component renders a Form element \nconst Form = (props) => {\n  const {cancel,errors,submit,submitButtonText,elements} = props;\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    submit();\n  }\n\n  function handleCancel(event) {\n    event.preventDefault();\n    cancel();\n  }\n\n  // User may export this component and provide methods for the form to execute as props\n  return (\n    <div>\n      <ErrorsDisplay errors={errors} />\n      <form onSubmit={handleSubmit}>\n        {elements()}\n        <div className=\"pad-bottom\">\n          <button className=\"button\" type=\"submit\">{submitButtonText}</button>\n          <button className=\"button button-secondary\" onClick={handleCancel}>Cancel</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n// Error display measures if there are any errors, and will map them out if length is greater than zero.\nfunction ErrorsDisplay({ errors }) {\n  let errorsDisplay = null;\n  if (errors.length) {\n    errorsDisplay = (\n      <div className=\"validation--errors\">\n        <h3>Validation errors</h3>\n        \n          <ul>\n            {errors.map((error, i) => <li key={i}>{error}</li>)}\n          </ul>\n        \n      </div>\n    );\n  }\n\n  return errorsDisplay;\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Form from './Form';\n\n// Looks like user wants to join the party...\nexport default class UserSignUp extends Component {\n\n  // initiate the following properties in state... essentially the required information for signing up as a new user.\n  state = {\n    firstName: '',\n    lastName: '',\n    emailAddress: '',\n    password: '',\n    confirmedPassword: '',\n    errors: []\n  }\n\n  render() {\n    // destructure the state's properties for ease of use\n    const {\n      firstName,\n      lastName,\n      emailAddress,\n      password,\n      confirmedPassword,\n      errors,\n    } = this.state;\n\n    // a Form component had been imported for easier form rendering; pass in this instance's methods as props\n    return (\n      <main className=\"bounds\">\n        <div className=\"form--centered\">\n          <h2>Sign Up</h2>\n          <Form \n            cancel={this.cancel}\n            errors={errors}\n            submit={this.submit}\n            submitButtonText=\"Sign Up\"\n            elements={() => (\n              <React.Fragment>\n                <input \n                  id=\"firstName\" \n                  name=\"firstName\" \n                  type=\"text\"\n                  value={firstName} \n                  onChange={this.change} \n                  placeholder=\"First Name\" />\n                <input \n                  id=\"lastName\" \n                  name=\"lastName\" \n                  type=\"text\"\n                  value={lastName} \n                  onChange={this.change} \n                  placeholder=\"Last Name\" />\n                <input \n                  id=\"emailAddress\" \n                  name=\"emailAddress\" \n                  type=\"text\"\n                  value={emailAddress} \n                  onChange={this.change} \n                  placeholder=\"Email Address\" />\n                <input \n                  id=\"password\" \n                  name=\"password\"\n                  type=\"password\"\n                  value={password} \n                  onChange={this.change} \n                  placeholder=\"Password\" />\n                <input \n                  id=\"confirmedPassword\" \n                  name=\"confirmedPassword\"\n                  type=\"password\"\n                  value={confirmedPassword} \n                  onChange={this.change} \n                  placeholder=\"Confirm Password\" />\n              </React.Fragment>\n            )} />\n          <p>\n            Already have a user account? <Link to=\"/signin\">Click here</Link> to sign in!\n          </p>\n        </div>\n      </main>\n    );\n  }\n  \n  // changes the inputs' displays as user types in real time\n  change = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    this.setState(() => {\n      return {\n        [name]: value\n      };\n    });\n  }\n  \n    // cancel button \n  cancel = () => {\n    this.props.history.push('/');\n  }\n\n  // submit function--takes ipnuts and uses api method in Data.js to be stored in database\n  // then logs users in and redirects them to previous page they were on... assuming everything went well.\n  submit = async () => {\n    // stuff passed down from the Provider component, such as the ability to make requests to the api folder; store it in its own variable for ease of use\n    const {context} = this.props;\n    \n    // stuff currently in the state property... essentially the user inputs; destructured for ease of use\n    const {firstName, lastName, emailAddress, password, confirmedPassword} = this.state;\n\n    // putting the user input data into one neat package called user.\n    // This is essentially going to serve as the body of the request normally used in Postman.\n    const user = {firstName, lastName, emailAddress, password};\n\n    // user needs to be certain of his/ her password\n    // only submit if password and confirm password matches up\n    // and only if the password field isn't blank\n    if(password && (password === confirmedPassword)) {\n      // call to api once the necessary data had been provided to see if user can be created with given info\n      const response = await context.data.createUser(user);\n\n      // there was a response, let's check it ouf...\n      try {\n        if (response.status === 201){\n          // if all goes well--> initiate a login for user, by accessing context's signIn method\n          // Then it's back to courses listing\n          await context.actions.signIn(emailAddress,password);\n          this.props.history.push('/');\n        } else if(response.status === 400) {\n          // validation errors were returned by api\n          // change the errors property in state from a blank array, so component can render it to user\n          const errors = await response.json();\n          this.setState({\n            errors: errors.errors\n          });\n        } else if (response.status === 500){\n          // the db is not working properly\n          this.props.history.push('/error');\n        }\n      } catch (error) {\n        // cannot send request for whatever reason\n        this.props.history.push('/error');\n      }\n    } else {\n      // request shouldn't be sent at all if passwords don't match or is blank\n      this.setState({\n        errors: [\"Please make sure password and confirm password are a match\"]\n      })\n    }\n  }  \n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Form from './Form';\n\n// user signin page\nexport default class UserSignIn extends Component {\n  // initiate the following properties in state: simple required login info, and errors to be filled if any arise\n  state = {\n    emailAddress: '',\n    password: '',\n    errors: [],\n  }\n\n  // keeps track of user typing and updating the input fields in real time\n  change = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    this.setState(() => {\n      return {\n        [name]: value\n      };\n    });\n  }\n\n  render() {\n    // destructure the inputs for ease of use\n    const {\n      emailAddress,\n      password,\n      errors,\n    } = this.state;\n\n    // A Form component has been imported to make form rendering easier--check out Form.js for more info\n    return (\n      <main>\n        <div className=\"form--centered\">\n            <h2>Sign In</h2>\n            <Form \n              cancel={this.cancel}\n              errors={errors}\n              submit={this.submit}\n              submitButtonText=\"Sign In\"\n              elements={() => (\n                <React.Fragment>\n                  <input \n                    id=\"emailAddress\" \n                    name=\"emailAddress\" \n                    type=\"text\"\n                    value={emailAddress} \n                    onChange={this.change} \n                    placeholder=\"Email Address\" />\n                  <input \n                    id=\"password\" \n                    name=\"password\"\n                    type=\"password\"\n                    value={password} \n                    onChange={this.change} \n                    placeholder=\"Password\" />                \n                </React.Fragment>\n              )} />\n            <p>\n              Don't have a user account? <Link to=\"/signup\">Click here</Link> to sign up!\n            </p>\n        </div>\n      </main>\n    );\n  }\n\n  \n  // user hitting logging in button will execute the following protocol\n  submit = async () => {\n    // this is essentially the value props passed down, linked to a Data instance that serves as a connection to the api folder\n    const {context} = this.props; \n\n    // allows browser to go back if user had been redirected\n    const {from} = this.props.location.state || {from: {pathname: '/'}};\n\n    // destructures email and password inputs for ease of use\n    const {emailAddress, password} = this.state;\n    \n    // this response variable is asynchronous, making a call to the api db to see if user has successfully logged in or not\n    const response = await context.actions.signIn(emailAddress, password)\n    \n    if(response.status !== 200 && response.status !== 500) {\n      // for whatever reason, response isn't 200, the only acceptable response, populate errors prop in state so component can render it to user\n      const errors = await response.json();\n      this.setState({\n        errors: [errors.message]\n      })\n      } else if (response.status === 500) {\n        this.props.history.push('/error');\n      }else {\n        // otherwise, it must be 200 status... redirect user back to wherever user had been trying to get to\n        this.props.history.push(from);\n      }\n\n  }\n\n  // Goes back to courses main page\n  cancel = () => {\n    this.props.history.push('/');\n  }\n}\n","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst UserSignOut = ({context}) => {\n  // normally, it's context.actions.signOut(), but useEffect prevents a warning.\n  useEffect(() => context.actions.signOut());\n\n  return (\n    <Redirect to=\"/\" />\n  );\n}\n\nexport default UserSignOut;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nexport default class Courses extends Component {\n    state = {\n        courses: []\n    }\n\n    componentDidMount(){\n        this.props.context.data.getCourses(this.props)\n            .then(gottenCourses => {\n                this.setState({\n                    courses: gottenCourses\n                });\n            })\n\n    }\n\n    render () {\n        return (\n            <main>\n                <div className=\"wrap main--grid\">\n                    {this.state.courses.map((course)=>\n                        <Link className=\"course--module course--link\" to={`/courses/${course.id}`} key={course.id}>\n                            <h2 className=\"course--label\">Course</h2>\n                            <h3 className=\"course--title\">{course.title}</h3>\n                        </Link>\n                    )}\n\n                    <Link className=\"course--module course--add--module\" to=\"/courses/create\">\n                        <span className=\"course--add--title\">\n                            <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                            viewBox=\"0 0 13 13\" className=\"add\"><polygon points=\"7,6 7,0 6,0 6,6 0,6 0,7 6,7 6,13 7,13 7,7 13,7 13,6 \"></polygon></svg>\n                            New Course\n                        </span>\n                    </Link>\n                </div>\n            </main>\n        )\n    }\n\n\n\n\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactMarkDown from 'react-markdown';\n\nexport default class CourseDetail extends Component {\n    // initiate class with the following state properties; will assume at first that the user is not owner of course.\n    state = {\n        courseTitle: '',\n        courseId: '',\n        courseDesc: '',\n        courseTime: '',\n        courseMaterials: '',\n        ownerFN: '',\n        ownerLN: '',\n        ownerEmail: '',\n        ownerId: '',\n        ownerPresent: false\n    }\n\n    // upon loading, component will reach out to api, using the provided id query to find a course\n    async componentDidMount(){\n        // user's authentication data is acquired here... and will be used to determine if user is owner of course.\n        const userAuth = this.props.context.authenticatedUser;\n\n        // store the id of the course user wants to retrieve in a variable\n        const courseId = this.props.match.params.id;\n\n        // asyncronously reach out to api for the specified course\n        const gottenCourse = await this.props.context.data.getOneCourse(courseId, this.props.history);\n        \n        // upon receiving data from api about course, program will update the state properties.\n        // ownerPresent will evaluate to true if userAuth data matches up with the returned data from api\n        if (gottenCourse) {\n                this.setState({\n                    courseTitle: gottenCourse.title,\n                    courseId: gottenCourse.id,\n                    courseDesc: gottenCourse.description,\n                    courseTime: gottenCourse.estimatedTime,\n                    courseMaterials: gottenCourse.materialsNeeded,\n                    ownerFN: gottenCourse.user.firstName,\n                    ownerLN: gottenCourse.user.lastName,\n                    ownerEmail: gottenCourse.user.emailAddress,\n                    ownerId: gottenCourse.user.id,\n\n                    // user's current data being compared with queried course data about owner's email address\n                    ownerPresent: userAuth ? userAuth.emailAddress === gottenCourse.user.emailAddress : false\n                })\n            } else {\n                // browser will redirect if api/gottenCourse returns null for a response\n                this.props.history.push('/notfound');\n            }\n    }\n\n    // handles deletion of current course; will ask for confirmation before carrying out deletion\n   destroy () {\n        let confirm = window.confirm(\"This action cannot be undone...\")\n        if (confirm) {\n            const {context} = this.props;\n            context.data.deleteCourse(this.state.courseId, context.authenticatedUser.emailAddress, context.authenticatedPassword)\n                .then(result => {\n                    if (result === \"Course Deleted\"){\n                        this.props.history.push('/');\n                    } else if (result === \"ERROR\") {\n                        this.props.history.push('/error');\n                    }\n                })\n            \n        }\n   }\n\n\n    render () {\n        // destructure state's properties for ease of use\n        const {\n            courseTitle, \n            courseId,\n            courseDesc,\n            courseTime,\n            courseMaterials, \n            ownerFN, \n            ownerLN, \n            ownerPresent} = this.state;\n        \n            // this variable will evaluate to either true or false--allowing component to render the edit and delete buttons if owner is present\n            const updateGate = ownerPresent ? `/courses/${courseId}/update` : '/forbidden'; \n            \n        return (\n            // unfortunately, Form component doesn't render as expected with provided CSS info... will have to build a unique form from scratch\n            <main>\n                <div className=\"actions--bar\">\n                    <div className=\"wrap\">\n                        {ownerPresent? <Link className=\"button\" to={updateGate}>Update Course</Link> : \"\"}\n                        {ownerPresent? <button className=\"button\" onClick={this.destroy.bind(this)}>Delete Course</button> : \"\"}\n                        <Link className=\"button button-secondary\" to={'/'}>Return to List</Link>\n                    </div>\n                </div>\n                <div className=\"wrap\">\n                    <h2>Course Detail</h2>\n                    <form>\n                        <div className=\"main--flex\">\n                            <div>\n                                <h3 className=\"course--detail--title\">Course</h3>\n                                <h4 className=\"course--name\">{courseTitle}</h4>\n                                <p>By {`${ownerFN} ${ownerLN}`}</p>\n                                <ReactMarkDown>{courseDesc}</ReactMarkDown>\n                            </div>\n                            <div>\n                                <h3 className=\"course--detail--title\">Estimated Time</h3>\n                                <p>{courseTime}</p>\n                                <h3 className=\"course--detail--title\">Materials Needed</h3>\n                                <ReactMarkDown>{courseMaterials}</ReactMarkDown>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </main>\n        )\n    }\n\n}","import React, { Component } from 'react';\n\n// this component will render an input form for creating a new course\nexport default class CreateCourse extends Component {\n    // initiate instance with the following properties, inlcuding error array to store any unexpected error\n    state = {\n        title: \"\",\n        description: \"\",\n        estimatedTime: \"\",\n        materialsNeeded: \"\",\n        errors: []\n    }\n\n    render() {\n        // destructure state's props for ease of use\n        const {\n            title, \n            description,\n            estimatedTime,\n            materialsNeeded,\n            errors\n        } = this.state;\n\n        const {context} = this.props;\n        return (\n            <main>\n                <div className=\"wrap\">\n                    <h2>Create Course</h2>\n                    {errors.length > 0 ? (\n                        <div className=\"validation--errors\">\n                            <h3>Validation Errors</h3>\n                            <ul>{errors.map((error, i) => <li key={i}>{error}</li>)}</ul>\n                        </div>\n                    )\n                    :\n                    (\n                        <div></div>\n                    )}\n                    <form onSubmit={this.submit}>\n                        <div className=\"main--flex\">\n                            <div>\n                                <label htmlFor=\"title\">Course Title</label>\n                                <input id=\"title\" name=\"title\" type=\"text\" value={title} onChange={this.change}/>\n\n                                <p>By {`${context.authenticatedUser.firstName} ${context.authenticatedUser.lastName}`}</p>\n\n                                <label htmlFor=\"description\">Course Description</label>\n                                <textarea id=\"description\" name=\"description\" value={description} onChange={this.change} />\n                            </div>\n                            <div>\n                                <label htmlFor=\"estimatedTime\">Estimated Time</label>\n                                <input id=\"estimatedTime\" name=\"estimatedTime\" type=\"text\" value={estimatedTime} onChange={this.change} />\n\n                                <label htmlFor=\"materialsNeeded\">Materials Needed</label>\n                                <textarea id=\"materialsNeeded\" name=\"materialsNeeded\" value={materialsNeeded} onChange={this.change} />\n                            </div>\n                        </div>\n                        <button className=\"button\" type=\"submit\">Create Course</button>\n                        <button className=\"button button-secondary\" onClick={this.cancel}>Cancel</button>\n                    </form>\n                </div>\n            </main>\n        )\n    }\n\n    // this method keeps track of user's inputs and updating it in the state prop in real time; wired to elements' onChange props\n    change = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n    \n        this.setState(() => {\n          return {\n            [name]: value\n          };\n        });\n    }\n\n    // clicking submit/create course button\n    submit = async (event) => {\n        // prevent page from reloading; the default effect\n        event.preventDefault();\n\n        // store the methods passed down in props from the Provider in its own variable for ease of use\n        const {context} = this.props;\n        \n        // Destructure the state's properties... essentially the user inputs as he/she types.\n        const {title, description, estimatedTime, materialsNeeded} = this.state;\n        \n        // store the necessary info minus error array into a reqBody for making a fetch request via context.data... for when user hits submit/save\n        const reqBody = {title, description, estimatedTime, materialsNeeded};\n\n        // send a request to the post route using the reqBody and the authorization info. \n        try{\n            // use data's api method to send a request to db\n            // don't forget to include cookies' email and password; as the route requires authentication\n            const response = await context.data.createCourse(reqBody, context.authenticatedUser.emailAddress, context.authenticatedPassword);\n                if (response.status === 201) {\n                    // course successfully created\n                    // browser will redirect to the newly created coure's CourseDetail Page, using location information in the response header \n                    this.props.history.push(response.headers.get('Location'));\n                } else if (response.status === 400) {\n                    // 400 will prompt program to update state's errors property with an array of errors sent back from api\n                    const errors = await response.json();\n                    this.setState({\n                        errors: errors.errors\n                    })\n                } else if (response.status === 500){\n                    // 500 means the db is not working properly\n                    // redirect user to a generic errors page\n                    this.props.history.push('/error');\n                }\n            } catch (error) {\n                // cannot send request for whatever reason\n                // No connection? Data server not running?\n                this.props.history.push('/error');\n            }\n            \n    }\n\n    // cancel button; returns user to course listing\n    cancel = (event) => {\n        event.preventDefault();\n        this.props.history.push('/');\n    }\n}","import React, { Component } from 'react';\n\n// this component will render the update a course page... very tricky, lots of moving parts.\nexport default class UpdateCourse extends Component {\n    // initiate instance with the following properties, inlcuding error array to store any unexpected error\n    state = {\n        courseId: '',\n        title:'',\n        description:'',\n        estimatedTime:'',\n        materialsNeeded:'',\n        ownerId:'',\n        errors:[]\n    }\n\n    // when component mounts, assuming user is honestly trying to update his own course/ not trying to fiddle with url... or hacking...\n    // First, reach out to api to retrieve the course info that user wants to update.\n    async componentDidMount () {\n        try {\n        // store context into its own variable for ease of use\n        const {context} = this.props;\n        \n        // Reach out to api to get the course specified in the url query--should be the id parameter\n        // This response should return the OUTDATED info\n        const response = await context.data.getOneCourse(this.props.match.params.id);\n\n        // User needs to know what he/she's updating, so update the state's props to reflect the outdated info\n        this.setState({\n            courseId: response.id,\n            title: response.title,\n            description: response.description,\n            estimatedTime: response.estimatedTime,\n            materialsNeeded: response.materialsNeeded,\n            ownerId: response.userId\n\n        });\n        \n        // if it turns out user isn't owner... and has no business being on this page... redirect to forbidden page\n           if(context.authenticatedUser.id !== this.state.ownerId) {\n            this.props.history.push('/forbidden');\n            } \n        } catch (error) {\n            // if the course doesn't even exist, or has been deleted probably... redirect to not found\n            this.props.history.push('/notfound');\n        }\n    }\n\n    // keeps track of input changes and updates them in state's properties in real time\n    change = (event) => {\n        const name = event.target.name;\n        const value = event.target.value;\n    \n        this.setState(() => {\n          return {\n            [name]: value\n          };\n        });\n      }\n\n    // Once User is done making changes, hitting the submit/save button should initiate the following protocols.\n      submit = async (event) => {\n        // stop form from refreshing page\n        event.preventDefault();\n\n        // stuff passed down from the Provider component, such as the ability to make requests to the api server\n        const {context} = this.props;\n\n        // stuff currently in the state property... essentially the user inputs/changes made\n        const {courseId, title, description, estimatedTime, materialsNeeded} = this.state;\n        \n        // store the necessary info minus error array into a reqBody\n        const reqBody = {title, description, estimatedTime, materialsNeeded};\n\n        // send a request to the PUT route using the reqBody, and the authorization info.\n        // response variable will hold an asynchronous response... let's check that response in the if statement below\n        const response = await context.data.updateCourse(courseId, reqBody, context.authenticatedUser.emailAddress, context.authenticatedPassword)\n\n            if (response.status === 204) {\n                // if udate is successful, redirect to that course's new Course Details page\n                this.props.history.push(`/courses/${courseId}`);\n            } else if (response.status === 400) {\n                // if it's a 400 error, then something didn't meet the fields' requirements.\n                // simply update the errors array so component can render them and make them visible to user\n                const errors = await response.json();\n                this.setState({\n                    errors: errors.errors\n                })\n            } else if (response.status === 403) {\n                // it's unlikely a user would have gotten this far, but on the off chance the supplied authorization info doesn't match up with course owner's...\n                this.props.history.push('/forbidden');\n            } else if (response.status === 500) {\n                this.props.history.push('/error');\n            }else {\n                // if server is down on whichever side, redirect user to an error's page.\n                this.props.history.push('/error');\n            }\n        \n      }\n\n    // sends user back to course listing page\n    cancel = (event) => {\n        event.preventDefault();\n        this.props.history.push(`/courses/${this.state.courseId}`);\n      }\n\n    // finally, let's render\n    render() {\n        // destrucure the state's properties for ease of use\n        const {\n            title, \n            description,\n            estimatedTime,\n            materialsNeeded,\n            errors\n        } = this.state;\n\n        // put context(for getting cookies' user firstname and lastname) in its own variable for ease of use\n        const {context} = this.props;\n        \n        // unfortunately, Form component doesn't render as expectedly to meet desired visual, will have to build a form from scratch\n        // Form will check for errors if there are any, and display them--will display an empty div is there are none.\n        // Form prepopulates all input fields with the outdated data that currently exists in the database via the value attributes on each input element\n        return(\n            <main>\n                <div className=\"wrap\">\n                    <h2>Update Course</h2>\n                    {errors.length > 0 ? (\n                        <div className=\"validation--errors\">\n                            <h3>Validation Errors</h3>\n                            <ul>{errors.map((error, i) => <li key={i}>{error}</li>)}</ul>\n                        </div>\n                    )\n                    :\n                    (\n                        <div></div>\n                    )}\n                    <form onSubmit={this.submit}>\n                        <div className=\"main--flex\">\n                            <div>\n                                <label htmlFor=\"title\">Course Title</label>\n                                <input id=\"title\" name=\"title\" type=\"text\" value={title} onChange={this.change}/>\n\n                                <p>By {`${context.authenticatedUser.firstName} ${context.authenticatedUser.lastName}`}</p>\n\n                                <label htmlFor=\"description\">Course Description</label>\n                                <textarea id=\"description\" name=\"description\" value={description} onChange={this.change} />\n                            </div>\n                            <div>\n                                <label htmlFor=\"estimatedTime\">Estimated Time</label>\n                                <input id=\"estimatedTime\" name=\"estimatedTime\" type=\"text\" value={estimatedTime} onChange={this.change} />\n\n                                <label htmlFor=\"materialsNeeded\">Materials Needed</label>\n                                <textarea id=\"materialsNeeded\" name=\"materialsNeeded\" value={materialsNeeded} onChange={this.change} />\n                            </div>\n                        </div>\n                        <button className=\"button\" type=\"submit\">Update Course</button>\n                        <button className=\"button button-secondary\" onClick={this.cancel}>Cancel</button>\n                    </form>\n                </div>\n            </main>\n        )\n    }\n}","import React from 'react';\n\nconst NotFound = () => {\n    return (\n        <main>\n            <div className=\"wrap\">\n                <h2>Not Found</h2>\n                <p>Sorry! We couldn't find the page you're looking for.</p>\n            </div>\n        </main>\n    )\n}\n\nexport default NotFound;","import React from 'react';\n\nconst Forbidden = () => {\n    return (\n        <main>\n            <div className=\"wrap\">\n                <h2>Forbiddden</h2>\n                <p>Oh no! You can't access this page.</p>\n            </div>\n        </main>\n    )\n}\nexport default Forbidden;","import React from 'react';\n\nconst UnhandledError = () => {\n    return (\n        <main>\n            <div className=\"wrap\">\n                <h2>Error</h2>\n                <p>Sorry! We just encountered an unexpected error.</p>\n            </div>\n        </main>\n    )\n}\n\nexport default UnhandledError;","// import tools, mainly router mechanisms\nimport React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\n// import private routes\n\nimport PrivateRoute from './PrivateRoute';\n\n// import sign in/out/up components\nimport Header from './components/Header';\nimport UserSignUp from './components/UserSignUp';\nimport UserSignIn from './components/UserSignIn';\nimport UserSignOut from './components/UserSignOut';\n\n\n\n// import course components\nimport Courses from './components/Courses';\nimport CourseDetail from './components/CourseDetail';\nimport CreateCourse from './components/CreateCourse';\nimport UpdateCourse from './components/UpdateCourse';\nimport NotFound from './components/NotFound';\nimport Forbidden from './components/Forbidden';\nimport UnhandledError from './components/UnhandledError';\n\n// import Consumer wrapper component\nimport withContext from './Context';\n\n// subscribe all components to Context Provider using withContext\n\nconst HeaderWithContext = withContext(Header);\nconst UserSignUpWithContext = withContext(UserSignUp);\nconst UserSignInWithContext = withContext(UserSignIn);\nconst UserSignOutWithContext = withContext(UserSignOut);\nconst CoursesWithContext = withContext(Courses);\nconst CourseDetailWithContext = withContext(CourseDetail);\nconst CreateCourseWithContext = withContext(CreateCourse);\nconst UpdateCourseWithContext = withContext(UpdateCourse);\n\n// app component will render the majority of what user sees.\n// Header will appear on each page, minus error pages and forbidden page\nconst App = () => (\n  <Router>\n    <div>\n      <HeaderWithContext />\n      <Switch>\n        <Route exact path=\"/\" component={CoursesWithContext} />\n        \n        <PrivateRoute exact path=\"/courses/create\" component={CreateCourseWithContext} />\n        <Route exact path=\"/courses/:id\" component={CourseDetailWithContext} />\n\n        <PrivateRoute exact path=\"/courses/:id/update\" component={UpdateCourseWithContext} />\n        <Route path=\"/signin\" component={UserSignInWithContext} />\n        <Route path=\"/signup\" component={UserSignUpWithContext} />\n        <Route path=\"/signout\" component={UserSignOutWithContext} />\n        <Route path=\"/forbidden\" component={Forbidden} />\n        <Route path=\"/error\" component={UnhandledError} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  </Router>\n);\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from './Context';\nimport './styles/reset.css';\nimport './styles/global.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}